//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.1-b02-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.09.09 at 06:51:45 PM BST 
//


package ed.robust.dom.inner;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for file_info complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="file_info">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="id" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="file_type" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="original_name" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="version" type="{}version_info" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "file_info", propOrder = {
    "id",
    "fileType",
    "originalName",
    "version"
})
public class FileInfo {

    @XmlElement(required = true)
    protected String id;
    @XmlElement(name = "file_type", required = true)
    protected String fileType;
    @XmlElement(name = "original_name", required = true)
    protected String originalName;
    @XmlElement(required = true)
    protected List<VersionInfo> version;

    /**
     * Gets the value of the id property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the value of the id property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setId(String value) {
        this.id = value;
    }

    /**
     * Gets the value of the fileType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileType() {
        return fileType;
    }

    /**
     * Sets the value of the fileType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFileType(String value) {
        this.fileType = value;
    }

    /**
     * Gets the value of the originalName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getOriginalName() {
        return originalName;
    }

    /**
     * Sets the value of the originalName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setOriginalName(String value) {
        this.originalName = value;
    }

    /**
     * Gets the value of the version property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the version property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getVersion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link VersionInfo }
     * 
     * 
     */
    public List<VersionInfo> getVersion() {
        if (version == null) {
            version = new ArrayList<>();
        }
        return this.version;
    }

    /**
     * Gets the first version in info in the record (supposedly the most recent)
     * @return the first version entry or null if file info is empty
     */
    public VersionInfo getFirst() {
        if (getVersion().isEmpty()) return null;
        return getVersion().get(0);
    }
    
    /**
     * Gets the last version in info in the record (supposedly the oldest)
     * @return the last version entry or null if file info is empty
     */
    public VersionInfo getLast() {
        if (getVersion().isEmpty()) return null;
        return getVersion().get(getVersion().size()-1);
    }
    
    public int size() {
        return getVersion().size();
    }

    /**
     * Removes version entry from the file record. The removal is based
     * on object identity == not on equal as versions ids may be duplicated.
     * @param elm version to be deleted
     * @return true if version was deleted from file info
     */
    public boolean remove(VersionInfo elm) {
        if (getVersion().isEmpty()) return false;
        for (int ix = 0;ix<version.size();ix++) {
            if (version.get(ix) == elm) {
                version.remove(ix);
                return true;
            }
        }
        return false;
    }
    

}
